{"version":3,"sources":["Components/logoTec.jpg","Components/Header.js","Components/Body.js","Components/Footer.js","Components/Banner.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","logoTec","Component","Body","props","texto1","temas","map","e","index","key","Button","onClick","alert","Footer","pie","Banner","texto","this","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+FAAAA,EAAOC,QAAU,IAA0B,qC,oRCe5BC,G,6KARP,OACI,yBAAKC,UAAU,UACX,yBAAKC,IAAKC,W,GAJLC,c,gBCuBNC,MAxBf,SAAcC,GAQV,OACI,yBAAKL,UAAU,QAEX,4BAAKK,EAAMC,QAEPD,EAAME,MAAMC,KAAI,SAACC,EAAEC,GAAH,OAChB,uBAAGC,IAAKD,GAAQD,MAIxB,kBAACG,EAAA,EAAD,CAAQC,QAAS,kBAdVC,MAAM,mDAcb,gB,MCXOC,MARf,YAAuB,IAANC,EAAK,EAALA,IACb,OACI,yBAAKhB,UAAU,UACVgB,ICSEC,G,6KAVF,IACEC,EAAOC,KAAKd,MAAZa,MACP,OACI,yBAAKlB,UAAU,UACVkB,O,GALIf,cCgCNiB,MA7Bf,WAOE,OACE,yBAAKpB,UAAU,OACb,kBAAC,EAAD,CACEkB,MAAM,uCAEN,kBAAC,EAAD,MACA,kBAAC,EAAD,CACAA,MAAM,eAEN,kBAAC,EAAD,CACAZ,OAAO,wBACPC,MAjBM,CAAC,0BACb,kBACA,+BACA,eACA,cAgBM,kBAAC,EAAD,CACAS,IAAK,+ECjBOK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a9b5bd1b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logoTec.96aff77c.jpg\";","import React,{Component} from 'react';\r\nimport logoTec from './logoTec.jpg';\r\nimport './Header.css';\r\n\r\n\r\nclass Header extends Component{\r\n    render(){\r\n        return(\r\n            <div className=\"Header\">\r\n                <img src={logoTec}></img>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport './Body.css';\r\nimport { Alert, Button } from 'react-bootstrap';\r\n\r\nfunction Body(props){\r\n\r\n        \r\n    const mensaje=()=>{\r\n        return alert(\"Hola mundo.\\n Pd. no pude centrar el header:(\")\r\n      }\r\n\r\n\r\n    return(\r\n        <div className=\"Body\">\r\n            \r\n            <h2>{props.texto1}</h2>\r\n            {\r\n                props.temas.map((e,index)=>\r\n                <p key={index}>{e}</p>\r\n                )\r\n            }\r\n\r\n        <Button onClick={()=>mensaje()}>Click aqui</Button>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Body;","import React from 'react';\r\nimport './Footer.css';\r\n\r\nfunction Footer({pie}){\r\n    return(\r\n        <div className=\"Footer\">\r\n            {pie}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React,{Component} from 'react';\r\nimport './Banner.css';\r\n\r\n\r\nclass Banner extends Component{\r\n    render(){\r\n        const {texto}=this.props;\r\n        return(\r\n            <div className=\"Banner\">\r\n                {texto}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Banner;","import React from 'react';\nimport './App.css';\nimport Header from './Components/Header';\nimport Body from './Components/Body';\nimport Footer from './Components/Footer';\nimport Banner from './Components/Banner';\n\nfunction App(){\n  const temas=[\"1. Tipos de componentes\", \n  \"2. Contenedores\", \n  \"3. Usar mas de un componente\", \n  \"4. Funciones\", \n  \"5. Props\"]\n\n  return (\n    <div className=\"App\">\n      <Banner\n        texto=\"Desarrollo de aplicaciones moviles\"\n        />\n        <Header/>\n        <Banner\n        texto=\"26/10/2020\"\n        />\n        <Body \n        texto1=\"Practica 1 - Unidad 2\"\n        temas={temas}\n        />\n        \n        <Footer\n        pie={<p>Copyright &copy; Todos los derechos reservados</p> }\n        />\n    </div>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}